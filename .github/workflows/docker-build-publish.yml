name: Docker build & publish

on:
    push:
        branches: ["*"]
        # Publish semver tags as releases.
        tags: ["v*.*.*"]
    pull_request:
        branches: ["*"]

env:
    # Use docker.io for Docker Hub if empty
    REGISTRY: ghcr.io
    # github.repository as <account>/<repo>
    IMAGE_NAME: ${{ github.repository }}
    BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Workaround: https://github.com/docker/build-push-action/issues/461
            - name: Setup Docker buildx
              uses: docker/setup-buildx-action@v2

            # Login against a Docker registry (only if semver tag)
            # https://github.com/docker/login-action
            - name: Log into registry ${{ env.REGISTRY }}
              if: startsWith(github.event.ref, 'refs/tags/v')
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            ## Build and push Docker image with Buildx (push only if semver tag)
            # https://github.com/docker/build-push-action
            - name: Build and push Docker image
              id: build-and-push
              uses: docker/build-push-action@v4
              with:
                  context: .
                  file: .docker/Dockerfile
                  pull: true
                  push: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
                  target: prod
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
