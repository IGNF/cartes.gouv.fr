# syntax=docker/dockerfile:1-labs
#----------------------------------------------------------------------
# Installer les dépendances PHP dans une couche dédiée
#----------------------------------------------------------------------
ARG project_dir=/opt/cartesgouvfr-site
ARG registry=docker.io
FROM ${registry}/library/composer:latest AS deps_php

ARG project_dir
RUN mkdir -p ${project_dir}
WORKDIR ${project_dir}
COPY . .
ENV APP_ENV=prod
RUN APP_ENV=prod composer install --prefer-dist --no-dev --no-cache --optimize-autoloader --no-progress \
    && composer require runtime/frankenphp-symfony \
    && composer dump-autoload --optimize --no-dev --classmap-authoritative \
    && APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear \
    && php bin/console assets:install \
    && composer symfony-routing-dump

#----------------------------------------------------------------------
# Installer les dépendances JavaScript/nodejs dans une couche dédiée
#----------------------------------------------------------------------
FROM ${registry}/library/node:20-alpine AS deps_nodejs
ARG project_dir
RUN mkdir -p ${project_dir}
WORKDIR ${project_dir}

RUN apk add --no-cache git

COPY --from=deps_php ${project_dir} .
RUN yarn install --production --frozen-lockfile \
    && yarn build \
    && yarn cache clean

#----------------------------------------------------------------------
# Créer l'image de base de l'application avec FrankenPHP
#----------------------------------------------------------------------
FROM ${registry}/library/ubuntu:24.04 AS base_app

ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=fr_FR.UTF-8

#----------------------------------------------------------------------
# Configurer "fr_FR.UTF-8" comme locale
#----------------------------------------------------------------------
RUN apt-get -qq update && DEBIAN_FRONTEND=noninteractive apt-get -qq install --no-install-recommends -y locales \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/fr_FR.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG=fr_FR.UTF-8 \
    && apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#----------------------------------------------------------------------
# Installer les outils communs et dépendances pour FrankenPHP
#----------------------------------------------------------------------
RUN apt-get -qq update \
    && apt-get -qq install --no-install-recommends -y \
    ca-certificates gnupg2 debian-keyring debian-archive-keyring apt-transport-https curl \
    libxml2 libssl3 zlib1g \
    && apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#----------------------------------------------------------------------
# Installer FrankenPHP avec PHP 8.2
#----------------------------------------------------------------------
RUN curl -1sLf 'https://dl.cloudsmith.io/public/caddy/xcaddy/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-xcaddy-archive-keyring.gpg \
    && curl -1sLf 'https://dl.cloudsmith.io/public/caddy/xcaddy/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-xcaddy.list \
    && apt-get -qq update

# Download and install FrankenPHP
RUN curl -fsSL https://github.com/dunglas/frankenphp/releases/latest/download/frankenphp-linux-x86_64 -o /usr/local/bin/frankenphp \
    && chmod +x /usr/local/bin/frankenphp

#------------------------------------------------------------------------
# Configurer le dépôt APT de PHP pour les extensions supplémentaires
#------------------------------------------------------------------------
RUN apt-get -qq update \
    && apt-get -qq install --no-install-recommends -y gnupg2 software-properties-common \
    && add-apt-repository -y ppa:ondrej/php \
    && apt-get remove -y software-properties-common \
    && apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#----------------------------------------------------------------------
# Créer les répertoires de configuration FrankenPHP
#----------------------------------------------------------------------
RUN mkdir -p /etc/frankenphp/conf.d /var/log/frankenphp /tmp \
    && chmod 777 /tmp /var/log /var/log/frankenphp

#----------------------------------------------------------------------
# Installer les extensions PHP supplémentaires si nécessaires
# FrankenPHP inclut déjà les extensions de base
#----------------------------------------------------------------------
ARG php_version=8.2
RUN apt-get -qq update \
    && apt-get -qq install --no-install-recommends -y \
    php${php_version}-cli \
    php${php_version}-dev \
    php${php_version}-xml \
    php${php_version}-curl \
    php${php_version}-intl \
    php${php_version}-zip \
    php${php_version}-sqlite3 \
    php${php_version}-opcache \
    php${php_version}-mbstring \
    php-pear \
    gcc make \
    autoconf \
    pkg-config \
    && php -m | grep -i xml \
    && php --version \
    && pecl install apcu \
    && echo "extension=apcu.so" > /etc/frankenphp/conf.d/20-apcu.ini \
    && apt-get -qq purge -y php-pear php${php_version}-dev gcc make autoconf pkg-config \
    && apt-get -qq autoremove -y \
    && apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#----------------------------------------------------------------------
# Configurer PHP pour FrankenPHP
#----------------------------------------------------------------------
COPY .docker/php.ini /etc/frankenphp/php.ini
COPY .docker/Caddyfile.frankenphp /etc/frankenphp/Caddyfile

#----------------------------------------------------------------------
# Copy startup script
#----------------------------------------------------------------------
COPY .docker/start-frankenphp.sh /usr/local/bin/start-frankenphp.sh
RUN chmod +x /usr/local/bin/start-frankenphp.sh

#----------------------------------------------------------------------
# Installer l'application pour production
#----------------------------------------------------------------------
FROM base_app AS prod
ARG project_dir
WORKDIR ${project_dir}
COPY --exclude=.git --exclude=var . .
COPY --from=deps_php ${project_dir}/vendor vendor
COPY --from=deps_php ${project_dir}/public/bundles public/bundles
COPY --from=deps_nodejs ${project_dir}/public/build public/build

RUN mkdir -p ${project_dir}/var \
    && chmod -R 777 ${project_dir}/var/ \
    && chmod -R 755 ${project_dir}/ \
    && chmod -R 777 ${project_dir}/var/

VOLUME ${project_dir}/var

ENV APP_ENV=prod
ENV APP_DEBUG=0

# Vérifier que le fichier de cache de vite est généré
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD test -s var/cache/prod/pentatrion_vite.cache.php || exit 1

EXPOSE 8000
CMD ["/usr/local/bin/start-frankenphp.sh"]

#----------------------------------------------------------------------
# Installer l'application pour développement
#----------------------------------------------------------------------
FROM base_app AS dev

COPY --from=composer /usr/bin/composer /usr/bin/composer

ARG project_dir
WORKDIR ${project_dir}
VOLUME ${project_dir}

# Installer xdebug
ARG php_version=8.2
RUN apt-get -qq update && apt-get -qq install -y \
    php${php_version}-dev \
    php${php_version}-xml \
    php-pear \
    zlib1g-dev \
    git \
    && apt-get -qq clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY .docker/php-xdebug.ini /etc/frankenphp/conf.d/20-xdebug.ini
RUN pear config-set php_ini /etc/frankenphp/php.ini \
    && pecl install xdebug \
    && echo "\nzend_extension=$(find /usr/lib/php/ -name xdebug.so)" >> /etc/frankenphp/conf.d/20-xdebug.ini

COPY .docker/php.ini /etc/frankenphp/php.ini

#----------------------------------------------------------------------
# Installation de nodejs depuis l'image officielle
#----------------------------------------------------------------------
COPY --from=node:20-slim /usr/local/lib/node_modules /usr/local/lib/node_modules
COPY --from=node:20-slim /usr/local/bin/node /usr/local/bin/node
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm \
    && npm i -g npm yarn pnpm

EXPOSE 8000
# CMD ["/usr/local/bin/start-frankenphp.sh"] 
# exec /usr/local/bin/frankenphp run --config /etc/frankenphp/Caddyfile
CMD ["/usr/local/bin/frankenphp", "run", "--config", "/etc/frankenphp/Caddyfile"]